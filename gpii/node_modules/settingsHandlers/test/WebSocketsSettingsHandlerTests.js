/*
 * WebSockets Settings Handler Tests
 *
 * Copyright 2013, 2014 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    gpii = fluid.registerNamespace("gpii"),
    jqUnit = fluid.require("jqUnit");

fluid.logObjectRenderChars = 4096;

var webSocketsTests = fluid.registerNamespace("gpii.tests.settingsHandlers.webSockets");

var wsSettingsHandlers = gpii.settingsHandlers.WebSocketsComponent();

webSocketsTests.payloads = {
    getPayload: [
        {
            "net.gpii.test": [
                {
                    settings: {
                        dog: null,
                        cat: null,
                        amount: null,
                        cheese: null,
                        "beers.trappiste": null,
                        "beers.blanche": null,
                        "beers.scotch": null
                    }
                }
            ]
        }
    ],
    setPayload: {
        "net.gpii.test": [
            {
                settings: {
                    dog: "woof",
                    cat: "meow",
                    amount: 3,
                    cheese: ["gouda", "brugge"],
                    "beers.trappiste": "Chimay",
                    "beers.blanche": "Hoegaarden",
                    "beers.scotch": "Achouffe McChouffe"
                }
            }
        ]
    },
    expectedSetReturnPayload: {
        "net.gpii.test": [
            {
                settings: {
                    dog: { oldValue: undefined, newValue: "woof" },
                    cat: { oldValue: undefined, newValue: "meow" },
                    amount: { oldValue: undefined, newValue: 3 },
                    cheese: { oldValue: undefined, newValue: ["gouda", "brugge"] },
                    "beers.trappiste": {oldValue: undefined, newValue: "Chimay" },
                    "beers.blanche": {oldValue: undefined, newValue: "Hoegaarden" },
                    "beers.scotch": {oldValue: undefined, newValue: "Achouffe McChouffe" }
                }
            }
        ]
    },
    restorePayload: {
        "net.gpii.test": [
            {
                settings: {
                    dog: undefined,
                    cat: undefined,
                    amount: undefined,
                    cheese: undefined,
                    "beers.trappiste": undefined,
                    "beers.blanche": undefined,
                    "beers.scotch": undefined
                }
            }
        ]
    },
    expectedRestoreReturnPayload: {
        "net.gpii.test": [
            {
                settings: {
                    dog: { newValue: undefined, oldValue: "woof" },
                    cat: { newValue: undefined, oldValue: "meow" },
                    amount: { newValue: undefined, oldValue: 3 },
                    cheese: { newValue: undefined, oldValue: ["gouda", "brugge"] },
                    "beers.trappiste": {newValue: undefined, oldValue: "Chimay" },
                    "beers.blanche": {newValue: undefined, oldValue: "Hoegaarden" },
                    "beers.scotch": {newValue: undefined, oldValue: "Achouffe McChouffe" }
                }
            }
        ]
    }
}

webSocketsTests.clients = {
    clientOne: ["net.gpii.client", {id:'OqaGGM_00Q2q8ItSnbuQ'}],
    clientOneExpected: {
        'OqaGGM_00Q2q8ItSnbuQ': {
            id: 'OqaGGM_00Q2q8ItSnbuQ'
        }
    }
}

jqUnit.module("WebSockets settings handler test module");

jqUnit.test("Checking wsSettingsHandler object before doing anything", function () {
    jqUnit.assertTrue("There are an object to store the settings",
                      wsSettingsHandlers.model.settings);
    jqUnit.assertTrue("There are an object to store the clients",
                      wsSettingsHandlers.model.clients);

    jqUnit.assertDeepEq("wsSettingsHandler.settings is empty", {},
                        wsSettingsHandlers.model.settings);
    jqUnit.assertDeepEq("wsSettingsHandler.clients is empty", {},
                        wsSettingsHandlers.model.clients);
});

jqUnit.test("Checking wsSettingsHandler's get/set methods", function () {
    jqUnit.assertDeepEq("There aren't settings yet for 'net.gpii.test'",
                        webSocketsTests.payloads.getPayload,
                        wsSettingsHandlers.get(webSocketsTests.payloads.getPayload, wsSettingsHandlers));

    var setReturnPayload = wsSettingsHandlers.set(webSocketsTests.payloads.setPayload, wsSettingsHandlers);
    jqUnit.assertDeepEq("Set function returns the expected payload",
                        webSocketsTests.payloads.expectedSetReturnPayload,
                        setReturnPayload);

    var restoreReturnPayload = wsSettingsHandlers.set(webSocketsTests.payloads.restorePayload);
    jqUnit.assertDeepEq("Restore returns the expected payload",
                        webSocketsTests.payloads.expectedRestoreReturnPayload,
                        restoreReturnPayload);

    jqUnit.assertDeepEq("After restoring, model.settings should be {}",
                        {},  wsSettingsHandlers.model.settings);
});

jqUnit.test("Checking wsSettingsHandler's add/remove methods", function () {
    wsSettingsHandlers.addClient(webSocketsTests.clients.clientOne[0], webSocketsTests.clients.clientOne[1]);
    jqUnit.assertDeepEq("Check that the client has been added", webSocketsTests.clients.clientOneExpected, wsSettingsHandlers.model.clients[webSocketsTests.clients.clientOne[0]]);
    console.log("### - " + JSON.stringify(wsSettingsHandlers.model.clients));

    wsSettingsHandlers.removeClient(webSocketsTests.clients.clientOne[1]);
    jqUnit.assertDeepEq("Check that the client has been removed", undefined, wsSettingsHandlers.model.clients[webSocketsTests.clients.clientOne[0]]);
    console.log("### - " + JSON.stringify(wsSettingsHandlers.model.clients));

    jqUnit.assertDeepEq("Check that the client object is clear", {}, wsSettingsHandlers.model.clients);

});
