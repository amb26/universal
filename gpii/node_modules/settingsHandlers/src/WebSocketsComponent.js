/*!
  GPII Web Sockets Settings Handler

  Copyright 2014, 2015 Emergya

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        $ = fluid.registerNamespace("jQuery");

    fluid.defaults("gpii.settingsHandlers.WebSocketsComponent", {
        gradeNames: ["fluid.modelRelayComponent", "autoInit"],
        changeApplierOptions: {
            resolverGetConfig: fluid.model.escapedGetConfig,
            resolverSetConfig: fluid.model.escapedSetConfig
        },
        model: {
            clients: {},
            settings: {}
        },
        modelListeners: {
            "clients.*": {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.clientsChanged",
                args: "{change}"
            },
            "settings.*": {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.settingsChanged",
                args: "{change}"
            }
        },
        invokers: {
            addClient: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.addClient",
                args: ["{that}", "{arguments}.0", "{arguments}.1"]
            },
            removeClient: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.removeClient",
                args: ["{that}", "{arguments}.0"]
            },
            getSettingsForId: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.getSettingsForId",
                args: ["{that}", "{arguments}.0"]
            },
            setSettingsForId: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.setSettingsForId",
                args: ["{that}", "{arguments}.0", "{arguments}.1"]
            },
            //getSettings: {
            //    funcName: "gpii.settingsHandlers.WebSocketsComponent.getSettings",
            //    args: ["{arguments}.0", "{arguments}.1", "{that}"]
            //},
            //setSettingsIndividually: {
            //    funcName: "gpii.settingsHandlers.WebSocketsComponent.setSettingsIndividually",
            //    args: ["{arguments}.0", "{arguments}.1", "{that}"]
            //},
            //setSettings: {
            //    funcName: "gpii.settingsHandlers.WebSocketsComponent.setSettings",
            //    args: ["{arguments}.0", "{arguments}.1", "{that}"]
            //},
            get: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.get",
                args: ["{arguments}.0", "{that}"]
            },
            set: {
                funcName: "gpii.settingsHandlers.WebSocketsComponent.set",
                args: ["{arguments}.0", "{that}"]
            }
        }
    });

    ///////////////// Clients /////////////////////

    gpii.settingsHandlers.WebSocketsComponent.clientsChanged = function (a) {
        var util = require("util");
        console.log("A change in clients has been registered: " + util.inspect(a));
    }

    gpii.settingsHandlers.WebSocketsComponent.addClient = function (that, solutionId, client) {
       var solution = solutionId.replace(/\./g, "\\.");
       var type = fluid.get(that.model.clients, [solutionId, client.id]) === undefined ? "ADD": null;

       //that.applier.change(["clients", solution, client.id], client, type);
       that.applier.change(["clients", solutionId, client.id], client, type);
    }

    gpii.settingsHandlers.WebSocketsComponent.removeClient = function (that, client) {
        for (var solutionId in that.model.clients) {
            var solution = solutionId.replace(/\./g, "\\.");
            that.applier.change("clients." + solution + "." + client.id, undefined, "DELETE");
            if ($.isEmptyObject(that.model.clients[solutionId])) {
                delete that.model.clients[solutionId];
            }
        }
    }

    ///////////////// Settings /////////////////////

    gpii.settingsHandlers.WebSocketsComponent.settingsChanged = function (a) {
        //console.log("A change in settings has been registered: " + JSON.stringify(a, null, 2));
    }

    gpii.settingsHandlers.WebSocketsComponent.getSettingsForId = function (that, solutionId) {
        return fluid.get(that.model.settings, [solutionId]);
    }

    gpii.settingsHandlers.WebSocketsComponent.setSettingsForId = function (that, solutionId, settings) {
       var solution = solutionId.replace(/\./g, "\\.");
       var type;

       if (settings === undefined) {
           type = "DELETE";
       } else {
           type = fluid.get(that.model.settings, solutionId) === undefined ? "ADD": null;
       }

       that.applier.change("settings." + solution, settings, type);
    }

    gpii.settingsHandlers.WebSocketsComponent.getSettings = function (payload, solutionId, that) {
        var currentSettings = fluid.get(that.model.settings, [solutionId]);

        var results = [];

        for (var i=0; i< payload.length; i++) {
            /*jshint -W083 */
            results[i] = {settings: {}};
            results[i].settings = fluid.transform(payload[i].settings, function (value, key) {
                var currentValue = fluid.get(currentSettings, key);
                return currentValue;
            });
        }

        return results;
    };

    gpii.settingsHandlers.WebSocketsComponent.get = function (payload, that) {
        var result = fluid.copy(payload);

        for (var appId in payload) {
            if (appId in that.model.settings) {
                result[appId] = gpii.settingsHandlers.WebSocketsComponent.getSettings(payload[appId], appId, that);
            //} else {
            //    result[appId] = {settings: {}};
            }
        }
        return result;
    };

    gpii.settingsHandlers.WebSocketsComponent.setSettingsIndividually = function (payload, solutionId, that) {
       var results = {settings: {}};
       var solution = solutionId.replace(/\./g, "\\.");

       fluid.each(payload.settings, function (value, key) {
           // 1st part of the work around the problems we're having when setting back some settings
           // to undefined, ie: a key called "like.this"
           //
           var solutionIdAndKey = [solutionId];
           var keyWithDots = false;

           if (key.match("\\.")) {
               keyWithDots = true;
               var s = key.split(".");
               solutionIdAndKey = solutionIdAndKey.concat(s);
           } else {
               solutionIdAndKey = solutionIdAndKey.concat(key);
           }

           var currentValue = fluid.get(that.model.settings, solutionIdAndKey);

           var type;
           if (currentValue === undefined) {
               type = "ADD";
           } else if (value === undefined) {
               type = "DELETE";
           } else {
               type = null;
           }

           results.settings[key] = {
               oldValue: currentValue,
               newValue: value,
           };

           that.applier.change("settings." + solution + "." + key, value, type);

           //2nd part of the workaround
           //
           if (keyWithDots && type === "DELETE") {
               var s = key.split(".");
               for (var i = s.length; i > 0; i--) {
                   if (i === s.length) {continue};
                   var v = fluid.get(that.model.settings, solutionIdAndKey.slice(0, i + 1));
                   if (Object.keys(v).length === 0) {
                       var objToRemove = s.slice(0, i).toString().replace(/\,/g, ".");
                       that.applier.change("settings." + solution + "." + objToRemove, undefined, type);
                   }
               }
           }
       });

       // Is there any other way to check this?
       //
       if ($.isEmptyObject(that.model.settings[solutionId])) {
           delete that.model.settings[solutionId];
       }

       return results;
    }

    gpii.settingsHandlers.WebSocketsComponent.setSettings = function (payload, solutionId, that) {
        var results = [];

        for (var i=0; i< payload.length; i++) {
            results[i] = gpii.settingsHandlers.WebSocketsComponent.setSettingsIndividually(payload[i], solutionId, that);
            gpii.settingsHandlers.WebSocketsComponent.notifySettings(solutionId, that);
        }

        return results;
    };

    gpii.settingsHandlers.WebSocketsComponent.set = function (payload, that) {
        var result = fluid.copy(payload);

        for (var appId in payload) {
            result[appId] = gpii.settingsHandlers.WebSocketsComponent.setSettings(payload[appId], appId, that);
        }

        return result;
    };

    gpii.settingsHandlers.WebSocketsComponent.notifySettings = function(id, that) {
        if (id in that.model.clients) {
            var newSettings = gpii.settingsHandlers.WebSocketsComponent.getSettingsForId(that, id);
            for (var client in that.model.clients[id]) {
                that.model.clients[id][client].emit("onBrowserSettingsChanged", newSettings);
            }
        }
    };

})();

